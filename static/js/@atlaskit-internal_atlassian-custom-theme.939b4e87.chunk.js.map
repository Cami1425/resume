{"version":3,"file":"static/js/@atlaskit-internal_atlassian-custom-theme.939b4e87.chunk.js","mappings":"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B,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,iBAAmB,iBAAmB,kBAAoB,iBAAmB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,iBAAkB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,iBAAkB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,mBAAoB,kBAAmB,iBAAkB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,iBAAkB,mBAAoB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,iBAAkB,mBAAoB,mBAAoB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,kBAAmB,mBAAoB,kBAAmB,mBAAoB,mBAAoB,iBAAkB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,mBAAoB,i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","sources":["../node_modules/@atlaskit/tokens/dist/esm/artifacts/atlassian-dark-token-value-for-contrast-check.js","../node_modules/@atlaskit/tokens/dist/esm/artifacts/atlassian-light-token-value-for-contrast-check.js","../node_modules/@atlaskit/tokens/dist/esm/utils/custom-theme-token-contrast-check.js","../node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/math-utils.js","../node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/color-utils.js","../node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/hct.js","../node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/contrast.js","../node_modules/@atlaskit/tokens/dist/esm/utils/generate-custom-color-ramp.js","../node_modules/@atlaskit/tokens/dist/esm/custom-theme.js"],"sourcesContent":["/**\n * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n *\n * Token names mapped to their values, used for contrast checking when generating custom themes\n *\n * @codegen <<SignedSource::023110f136ad929098f2d5a341b7ad7c>>\n * @codegenCommand yarn build tokens\n */\nvar tokenValues = {\n  'color.text.brand': '#579DFF',\n  'elevation.surface.overlay': '#282E33',\n  'color.background.selected': '#1C2B41',\n  'color.text.selected': '#579DFF',\n  'color.border.brand': '#579DFF',\n  'color.chart.brand': '#388BFF',\n  'color.text.inverse': '#1D2125'\n};\nexport default tokenValues;","/**\n * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n *\n * Token names mapped to their values, used for contrast checking when generating custom themes\n *\n * @codegen <<SignedSource::9975d8c2d3b07e5b405782c2d24fab5f>>\n * @codegenCommand yarn build tokens\n */\nvar tokenValues = {\n  'color.text.brand': '#0C66E4',\n  'elevation.surface.sunken': '#F7F8F9',\n  'color.background.selected': '#E9F2FF',\n  'color.text.selected': '#0C66E4',\n  'color.border.brand': '#0C66E4',\n  'color.chart.brand': '#1D7AFC',\n  'color.text.inverse': '#FFFFFF'\n};\nexport default tokenValues;","import tokenValuesDark from '../artifacts/atlassian-dark-token-value-for-contrast-check';\nimport tokenValuesLight from '../artifacts/atlassian-light-token-value-for-contrast-check';\nimport { getContrastRatio } from './color-utils';\nexport var additionalChecks = [{\n  foreground: 'color.text.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 4.5,\n  updatedTokens: [\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  'color.text.brand', 'color.text.selected', 'color.link', 'color.link.pressed', 'color.icon.brand', 'color.icon.selected']\n}, {\n  foreground: 'color.text.brand',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.text.brand', 'color.link', 'color.link.pressed']\n}, {\n  foreground: 'color.text.selected',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.text.selected', 'color.icon.selected']\n}, {\n  foreground: 'color.border.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.border.brand', 'color.border.selected']\n}, {\n  foreground: 'color.chart.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.chart.brand', 'color.chart.brand.hovered']\n}];\nvar getColorFromTokenRaw = function getColorFromTokenRaw(tokenName, mode) {\n  return mode === 'light' ? tokenValuesLight[tokenName] : tokenValuesDark[tokenName];\n};\nexport var additionalContrastChecker = function additionalContrastChecker(_ref) {\n  var customThemeTokenMap = _ref.customThemeTokenMap,\n    mode = _ref.mode,\n    themeRamp = _ref.themeRamp;\n  var updatedCustomThemeTokenMap = {};\n  var brandTokens = Object.keys(customThemeTokenMap);\n  additionalChecks.forEach(function (pairing) {\n    var backgroundLight = pairing.backgroundLight,\n      backgroundDark = pairing.backgroundDark,\n      foreground = pairing.foreground,\n      desiredContrast = pairing.desiredContrast,\n      updatedTokens = pairing.updatedTokens;\n    var background = mode === 'light' ? backgroundLight : backgroundDark;\n    var foregroundTokenValue = customThemeTokenMap[foreground];\n    var backgroundTokenValue = customThemeTokenMap[background];\n    var foregroundColor = brandTokens.includes(foreground) ? typeof foregroundTokenValue === 'string' ? foregroundTokenValue : themeRamp[foregroundTokenValue] : getColorFromTokenRaw(foreground, mode);\n    var backgroundColor = brandTokens.includes(background) ? typeof backgroundTokenValue === 'string' ? backgroundTokenValue : themeRamp[backgroundTokenValue] : getColorFromTokenRaw(background, mode);\n    var contrast = getContrastRatio(foregroundColor, backgroundColor);\n    if (contrast <= desiredContrast) {\n      updatedTokens.forEach(function (token) {\n        var rampValue = customThemeTokenMap[token];\n        if (typeof rampValue === 'number') {\n          updatedCustomThemeTokenMap[token] = mode === 'light' ? rampValue + 1 : rampValue - 1;\n        }\n      });\n    }\n  });\n  return updatedCustomThemeTokenMap;\n};","/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num) {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start, stop, amount) {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min, max, input) {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min, max, input) {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees) {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees) {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from, to) {\n  var increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a, b) {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row, matrix) {\n  var a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  var b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  var c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}","/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math-utils';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nvar SRGB_TO_XYZ = [[0.41233895, 0.35762064, 0.18051042], [0.2126, 0.7152, 0.0722], [0.01932141, 0.11916382, 0.95034478]];\nvar XYZ_TO_SRGB = [[3.2413774792388685, -1.5376652402851851, -0.49885366846268053], [-0.9691452513005321, 1.8758853451067872, 0.04156585616912061], [0.05562093689691305, -0.20395524564742123, 1.0571799111220335]];\nvar WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red, green, blue) {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb) {\n  var r = delinearized(linrgb[0]);\n  var g = delinearized(linrgb[1]);\n  var b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb) {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb) {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb) {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb) {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb) {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x, y, z) {\n  var matrix = XYZ_TO_SRGB;\n  var linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  var linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  var linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  var r = delinearized(linearR);\n  var g = delinearized(linearG);\n  var b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb) {\n  var r = linearized(redFromArgb(argb));\n  var g = linearized(greenFromArgb(argb));\n  var b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar) {\n  var y = yFromLstar(lstar);\n  var component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb) {\n  var y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar) {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y) {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent) {\n  var normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent) {\n  var normalized = rgbComponent / 100.0;\n  var delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65() {\n  return WHITE_POINT_D65;\n}\n\n/**\n * RGBA component\n *\n * @param r Red value should be between 0-255\n * @param g Green value should be between 0-255\n * @param b Blue value should be between 0-255\n * @param a Alpha value should be between 0-255\n */\n\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb) {\n  var r = redFromArgb(argb);\n  var g = greenFromArgb(argb);\n  var b = blueFromArgb(argb);\n  var a = alphaFromArgb(argb);\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\n\n/**\n * Return int32 color from a given RGBA component\n *\n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba(_ref) {\n  var r = _ref.r,\n    g = _ref.g,\n    b = _ref.b,\n    a = _ref.a;\n  var rValue = clampComponent(r);\n  var gValue = clampComponent(g);\n  var bValue = clampComponent(b);\n  var aValue = clampComponent(a);\n  return aValue << 24 | rValue << 16 | gValue << 8 | bValue;\n}\nfunction clampComponent(value) {\n  if (value < 0) {\n    return 0;\n  }\n  if (value > 255) {\n    return 255;\n  }\n  return value;\n}\nfunction labF(t) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\nfunction labInvf(ft) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  var ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _ViewingConditions;\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport var Hct = /*#__PURE__*/function () {\n  function Hct(argb) {\n    _classCallCheck(this, Hct);\n    this.argb = argb;\n    var cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n  return _createClass(Hct, [{\n    key: \"toInt\",\n    value: function toInt() {\n      return this.argb;\n    }\n\n    /**\n     * A number, in degrees, representing ex. red, orange, yellow, etc.\n     * Ranges from 0 <= hue < 360.\n     */\n  }, {\n    key: \"hue\",\n    get: function get() {\n      return this.internalHue;\n    }\n\n    /**\n     * @param newHue 0 <= newHue < 360; invalid values are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newHue) {\n      this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));\n    }\n  }, {\n    key: \"chroma\",\n    get: function get() {\n      return this.internalChroma;\n    }\n\n    /**\n     * @param newChroma 0 <= newChroma < ?\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newChroma) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));\n    }\n\n    /**\n     * Lightness. Ranges from 0 to 100.\n     */\n  }, {\n    key: \"tone\",\n    get: function get() {\n      return this.internalTone;\n    }\n\n    /**\n     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newTone) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));\n    }\n  }, {\n    key: \"setInternalState\",\n    value: function setInternalState(argb) {\n      var cam = Cam16.fromInt(argb);\n      this.internalHue = cam.hue;\n      this.internalChroma = cam.chroma;\n      this.internalTone = utils.lstarFromArgb(argb);\n      this.argb = argb;\n    }\n\n    /**\n     * Translates a color into different [ViewingConditions].\n     *\n     * Colors change appearance. They look different with lights on versus off,\n     * the same color, as in hex code, on white looks different when on black.\n     * This is called color relativity, most famously explicated by Josef Albers\n     * in Interaction of Color.\n     *\n     * In color science, color appearance models can account for this and\n     * calculate the appearance of a color in different settings. HCT is based on\n     * CAM16, a color appearance model, and uses it to make these calculations.\n     *\n     * See [ViewingConditions.make] for parameters affecting color appearance.\n     */\n  }, {\n    key: \"inViewingConditions\",\n    value: function inViewingConditions(vc) {\n      // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n      var cam = Cam16.fromInt(this.toInt());\n      var viewedInVc = cam.xyzInViewingConditions(vc);\n\n      // 2. Create CAM16 of those XYZ coordinates in default VC.\n      var recastInVc = Cam16.fromXyzInViewingConditions(viewedInVc[0], viewedInVc[1], viewedInVc[2], ViewingConditions.make());\n\n      // 3. Create HCT from:\n      // - CAM16 using default VC with XYZ coordinates in specified VC.\n      // - L* converted from Y in XYZ coordinates in specified VC.\n      var recastHct = Hct.from(recastInVc.hue, recastInVc.chroma, utils.lstarFromY(viewedInVc[1]));\n      return recastHct;\n    }\n  }], [{\n    key: \"from\",\n    value:\n    /**\n     * @param hue 0 <= hue < 360; invalid values are corrected.\n     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n     *     returned may be lower than the requested chroma. Chroma has a different\n     *     maximum for any given hue and tone.\n     * @param tone 0 <= tone <= 100; invalid values are corrected.\n     * @return HCT representation of a color in default viewing conditions.\n     */\n\n    function from(hue, chroma, tone) {\n      return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return HCT representation of a color in default viewing conditions\n     */\n  }, {\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return new Hct(argb);\n    }\n  }]);\n}();\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nvar Cam16 = /*#__PURE__*/function () {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  function Cam16(hue, chroma, j, q, m, s, jstar, astar, bstar) {\n    _classCallCheck(this, Cam16);\n    this.hue = hue;\n    this.chroma = chroma;\n    this.j = j;\n    this.q = q;\n    this.m = m;\n    this.s = s;\n    this.jstar = jstar;\n    this.astar = astar;\n    this.bstar = bstar;\n  }\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  return _createClass(Cam16, [{\n    key: \"distance\",\n    value: function distance(other) {\n      var dJ = this.jstar - other.jstar;\n      var dA = this.astar - other.astar;\n      var dB = this.bstar - other.bstar;\n      var dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n      var dE = 1.41 * Math.pow(dEPrime, 0.63);\n      return dE;\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return CAM16 color, assuming the color was viewed in default viewing\n     *     conditions.\n     */\n  }, {\n    key: \"toInt\",\n    value:\n    /**\n     *  @return ARGB representation of color, assuming the color was viewed in\n     *     default viewing conditions, which are near-identical to the default\n     *     viewing conditions for sRGB.\n     */\n    function toInt() {\n      return this.viewed(ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param viewingConditions Information about the environment where the color\n     *     will be viewed.\n     * @return ARGB representation of color\n     */\n  }, {\n    key: \"viewed\",\n    value: function viewed(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      var argb = utils.argbFromXyz(x, y, z);\n      return argb;\n    }\n\n    /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n    /// CAM16.\n  }, {\n    key: \"xyzInViewingConditions\",\n    value:\n    /// XYZ representation of CAM16 seen in [viewingConditions].\n    function xyzInViewingConditions(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      return [x, y, z];\n    }\n  }], [{\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     * @return CAM16 color.\n     */\n  }, {\n    key: \"fromIntInViewingConditions\",\n    value: function fromIntInViewingConditions(argb, viewingConditions) {\n      var red = (argb & 0x00ff0000) >> 16;\n      var green = (argb & 0x0000ff00) >> 8;\n      var blue = argb & 0x000000ff;\n      var redL = utils.linearized(red);\n      var greenL = utils.linearized(green);\n      var blueL = utils.linearized(blue);\n      var x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n      var y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n      var z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360.0 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n      var ac = p2 * viewingConditions.nbb;\n      var j = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var c = alpha * Math.sqrt(j / 100.0);\n      var m = c * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     */\n  }, {\n    key: \"fromJch\",\n    value: function fromJch(j, c, h) {\n      return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromJchInViewingConditions\",\n    value: function fromJchInViewingConditions(j, c, h, viewingConditions) {\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var m = c * viewingConditions.fLRoot;\n      var alpha = c / Math.sqrt(j / 100.0);\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var hueRadians = h * Math.PI / 180.0;\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     */\n  }, {\n    key: \"fromUcs\",\n    value: function fromUcs(jstar, astar, bstar) {\n      return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromUcsInViewingConditions\",\n    value: function fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {\n      var a = astar;\n      var b = bstar;\n      var m = Math.sqrt(a * a + b * b);\n      var M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n      var c = M / viewingConditions.fLRoot;\n      var h = Math.atan2(b, a) * (180.0 / Math.PI);\n      if (h < 0.0) {\n        h += 360.0;\n      }\n      var j = jstar / (1 - (jstar - 100) * 0.007);\n      return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n    }\n  }, {\n    key: \"fromXyzInViewingConditions\",\n    value: function fromXyzInViewingConditions(x, y, z, viewingConditions) {\n      // Transform XYZ to 'cone'/'rgb' responses\n\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n      // Discount illuminant\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n\n      // chromatic adaptation\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n\n      // auxiliary components\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n      // hue\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n\n      // achromatic response to color\n      var ac = p2 * viewingConditions.nbb;\n\n      // CAM16 lightness and brightness\n      var J = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var Q = 4.0 / viewingConditions.c * Math.sqrt(J / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 1.0 / 4.0 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      // CAM16 chroma, colorfulness, chroma\n      var C = alpha * Math.sqrt(J / 100.0);\n      var M = C * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n\n      // CAM16-UCS components\n      var jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n      var mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n    }\n  }]);\n}(); // This file is automatically generated. Do not modify it.\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nvar HctSolver = /*#__PURE__*/function () {\n  function HctSolver() {\n    _classCallCheck(this, HctSolver);\n  }\n  return _createClass(HctSolver, null, [{\n    key: \"sanitizeRadians\",\n    value:\n    /**\n     * Sanitizes a small enough angle in radians.\n     *\n     * @param angle An angle in radians; must not deviate too much\n     * from 0.\n     * @return A coterminal angle between 0 and 2pi.\n     */\n    function sanitizeRadians(angle) {\n      return (angle + Math.PI * 8) % (Math.PI * 2);\n    }\n\n    /**\n     * Delinearizes an RGB component, returning a floating-point\n     * number.\n     *\n     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n     * linear R/G/B channel\n     * @return 0.0 <= output <= 255.0, color channel converted to\n     * regular RGB space\n     */\n  }, {\n    key: \"trueDelinearized\",\n    value: function trueDelinearized(rgbComponent) {\n      var normalized = rgbComponent / 100.0;\n      var delinearized = 0.0;\n      if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n      } else {\n        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n      }\n      return delinearized * 255.0;\n    }\n  }, {\n    key: \"chromaticAdaptation\",\n    value: function chromaticAdaptation(component) {\n      var af = Math.pow(Math.abs(component), 0.42);\n      return math.signum(component) * 400.0 * af / (af + 27.13);\n    }\n\n    /**\n     * Returns the hue of a linear RGB color in CAM16.\n     *\n     * @param linrgb The linear RGB coordinates of a color.\n     * @return The hue of the color in CAM16, in radians.\n     */\n  }, {\n    key: \"hueOf\",\n    value: function hueOf(linrgb) {\n      var scaledDiscount = math.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n      var rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n      var gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n      var bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      return Math.atan2(b, a);\n    }\n  }, {\n    key: \"areInCyclicOrder\",\n    value: function areInCyclicOrder(a, b, c) {\n      var deltaAB = HctSolver.sanitizeRadians(b - a);\n      var deltaAC = HctSolver.sanitizeRadians(c - a);\n      return deltaAB < deltaAC;\n    }\n\n    /**\n     * Solves the lerp equation.\n     *\n     * @param source The starting number.\n     * @param mid The number in the middle.\n     * @param target The ending number.\n     * @return A number t such that lerp(source, target, t) = mid.\n     */\n  }, {\n    key: \"intercept\",\n    value: function intercept(source, mid, target) {\n      return (mid - source) / (target - source);\n    }\n  }, {\n    key: \"lerpPoint\",\n    value: function lerpPoint(source, t, target) {\n      return [source[0] + (target[0] - source[0]) * t, source[1] + (target[1] - source[1]) * t, source[2] + (target[2] - source[2]) * t];\n    }\n\n    /**\n     * Intersects a segment with a plane.\n     *\n     * @param source The coordinates of point A.\n     * @param coordinate The R-, G-, or B-coordinate of the plane.\n     * @param target The coordinates of point B.\n     * @param axis The axis the plane is perpendicular with. (0: R, 1:\n     * G, 2: B)\n     * @return The intersection point of the segment AB with the plane\n     * R=coordinate, G=coordinate, or B=coordinate\n     */\n  }, {\n    key: \"setCoordinate\",\n    value: function setCoordinate(source, coordinate, target, axis) {\n      var t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n      return HctSolver.lerpPoint(source, t, target);\n    }\n  }, {\n    key: \"isBounded\",\n    value: function isBounded(x) {\n      return 0.0 <= x && x <= 100.0;\n    }\n\n    /**\n     * Returns the nth possible vertex of the polygonal intersection.\n     *\n     * @param y The Y value of the plane.\n     * @param n The zero-based index of the point. 0 <= n <= 11.\n     * @return The nth possible vertex of the polygonal intersection\n     * of the y plane and the RGB cube, in linear RGB coordinates, if\n     * it exists. If this possible vertex lies outside of the cube,\n     * [-1.0, -1.0, -1.0] is returned.\n     */\n  }, {\n    key: \"nthVertex\",\n    value: function nthVertex(y, n) {\n      var kR = HctSolver.Y_FROM_LINRGB[0];\n      var kG = HctSolver.Y_FROM_LINRGB[1];\n      var kB = HctSolver.Y_FROM_LINRGB[2];\n      var coordA = n % 4 <= 1 ? 0.0 : 100.0;\n      var coordB = n % 2 === 0 ? 0.0 : 100.0;\n      if (n < 4) {\n        var g = coordA;\n        var b = coordB;\n        var r = (y - g * kG - b * kB) / kR;\n        if (HctSolver.isBounded(r)) {\n          return [r, g, b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else if (n < 8) {\n        var _b = coordA;\n        var _r = coordB;\n        var _g = (y - _r * kR - _b * kB) / kG;\n        if (HctSolver.isBounded(_g)) {\n          return [_r, _g, _b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else {\n        var _r2 = coordA;\n        var _g2 = coordB;\n        var _b2 = (y - _r2 * kR - _g2 * kG) / kB;\n        if (HctSolver.isBounded(_b2)) {\n          return [_r2, _g2, _b2];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      }\n    }\n\n    /**\n     * Finds the segment containing the desired color.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return A list of two sets of linear RGB coordinates, each\n     * corresponding to an endpoint of the segment containing the\n     * desired color.\n     */\n  }, {\n    key: \"bisectToSegment\",\n    value: function bisectToSegment(y, targetHue) {\n      var left = [-1.0, -1.0, -1.0];\n      var right = left;\n      var leftHue = 0.0;\n      var rightHue = 0.0;\n      var initialized = false;\n      var uncut = true;\n      for (var _n = 0; _n < 12; _n++) {\n        var mid = HctSolver.nthVertex(y, _n);\n        if (mid[0] < 0) {\n          continue;\n        }\n        var midHue = HctSolver.hueOf(mid);\n        if (!initialized) {\n          left = mid;\n          right = mid;\n          leftHue = midHue;\n          rightHue = midHue;\n          initialized = true;\n          continue;\n        }\n        if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n          uncut = false;\n          if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n            right = mid;\n            rightHue = midHue;\n          } else {\n            left = mid;\n            leftHue = midHue;\n          }\n        }\n      }\n      return [left, right];\n    }\n  }, {\n    key: \"midpoint\",\n    value: function midpoint(a, b) {\n      return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2, (a[2] + b[2]) / 2];\n    }\n  }, {\n    key: \"criticalPlaneBelow\",\n    value: function criticalPlaneBelow(x) {\n      return Math.floor(x - 0.5);\n    }\n  }, {\n    key: \"criticalPlaneAbove\",\n    value: function criticalPlaneAbove(x) {\n      return Math.ceil(x - 0.5);\n    }\n\n    /**\n     * Finds a color with the given Y and hue on the boundary of the\n     * cube.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return The desired color, in linear RGB coordinates.\n     */\n  }, {\n    key: \"bisectToLimit\",\n    value: function bisectToLimit(y, targetHue) {\n      var segment = HctSolver.bisectToSegment(y, targetHue);\n      var left = segment[0];\n      var leftHue = HctSolver.hueOf(left);\n      var right = segment[1];\n      for (var axis = 0; axis < 3; axis++) {\n        if (left[axis] !== right[axis]) {\n          var lPlane = -1;\n          var rPlane = 255;\n          if (left[axis] < right[axis]) {\n            lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));\n          } else {\n            lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));\n          }\n          for (var i = 0; i < 8; i++) {\n            if (Math.abs(rPlane - lPlane) <= 1) {\n              break;\n            } else {\n              var mPlane = Math.floor((lPlane + rPlane) / 2.0);\n              var midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n              var mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n              var midHue = HctSolver.hueOf(mid);\n              if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                right = mid;\n                rPlane = mPlane;\n              } else {\n                left = mid;\n                leftHue = midHue;\n                lPlane = mPlane;\n              }\n            }\n          }\n        }\n      }\n      return HctSolver.midpoint(left, right);\n    }\n  }, {\n    key: \"inverseChromaticAdaptation\",\n    value: function inverseChromaticAdaptation(adapted) {\n      var adaptedAbs = Math.abs(adapted);\n      var base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n      return math.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n    }\n\n    /**\n     * Finds a color with the given hue, chroma, and Y.\n     *\n     * @param hueRadians The desired hue in radians.\n     * @param chroma The desired chroma.\n     * @param y The desired Y.\n     * @return The desired color as a hexadecimal integer, if found; 0\n     * otherwise.\n     */\n  }, {\n    key: \"findResultByJ\",\n    value: function findResultByJ(hueRadians, chroma, y) {\n      // Initial estimate of j.\n      var j = Math.sqrt(y) * 11.0;\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      var viewingConditions = ViewingConditions.DEFAULT;\n      var tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var hSin = Math.sin(hueRadians);\n      var hCos = Math.cos(hueRadians);\n      for (var iterationRound = 0; iterationRound < 5; iterationRound++) {\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        var jNormalized = j / 100.0;\n        var alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n        var t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n        var ac = viewingConditions.aw * Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n        var p2 = ac / viewingConditions.nbb;\n        var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n        var a = gamma * hCos;\n        var b = gamma * hSin;\n        var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        var rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n        var gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n        var bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n        var linrgb = math.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n          return 0;\n        }\n        var kR = HctSolver.Y_FROM_LINRGB[0];\n        var kG = HctSolver.Y_FROM_LINRGB[1];\n        var kB = HctSolver.Y_FROM_LINRGB[2];\n        var fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n        if (fnj <= 0) {\n          return 0;\n        }\n        if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n          if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n            return 0;\n          }\n          return utils.argbFromLinrgb(linrgb);\n        }\n        // Iterates with Newton method,\n        // Using 2 * fn(j) / j as the approximation of fn'(j)\n        j = j - (fnj - y) * j / (2 * fnj);\n      }\n      return 0;\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return A hexadecimal representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToInt\",\n    value: function solveToInt(hueDegrees, chroma, lstar) {\n      if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n        return utils.argbFromLstar(lstar);\n      }\n      hueDegrees = math.sanitizeDegreesDouble(hueDegrees);\n      var hueRadians = hueDegrees / 180 * Math.PI;\n      var y = utils.yFromLstar(lstar);\n      var exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n      if (exactAnswer !== 0) {\n        return exactAnswer;\n      }\n      var linrgb = HctSolver.bisectToLimit(y, hueRadians);\n      return utils.argbFromLinrgb(linrgb);\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return An CAM16 object representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToCam\",\n    value: function solveToCam(hueDegrees, chroma, lstar) {\n      return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n    }\n  }]);\n}();\n_defineProperty(HctSolver, \"SCALED_DISCOUNT_FROM_LINRGB\", [[0.001200833568784504, 0.002389694492170889, 0.0002795742885861124], [0.0005891086651375999, 0.0029785502573438758, 0.0003270666104008398], [0.00010146692491640572, 0.0005364214359186694, 0.0032979401770712076]]);\n_defineProperty(HctSolver, \"LINRGB_FROM_SCALED_DISCOUNT\", [[1373.2198709594231, -1100.4251190754821, -7.278681089101213], [-271.815969077903, 559.6580465940733, -32.46047482791194], [1.9622899599665666, -57.173814538844006, 308.7233197812385]]);\n_defineProperty(HctSolver, \"Y_FROM_LINRGB\", [0.2126, 0.7152, 0.0722]);\n_defineProperty(HctSolver, \"CRITICAL_PLANES\", [0.015176349177441876, 0.045529047532325624, 0.07588174588720938, 0.10623444424209313, 0.13658714259697685, 0.16693984095186062, 0.19729253930674434, 0.2276452376616281, 0.2579979360165119, 0.28835063437139563, 0.3188300904430532, 0.350925934958123, 0.3848314933096426, 0.42057480301049466, 0.458183274052838, 0.4976837250274023, 0.5391024159806381, 0.5824650784040898, 0.6277969426914107, 0.6751227633498623, 0.7244668422128921, 0.775853049866786, 0.829304845476233, 0.8848452951698498, 0.942497089126609, 1.0022825574869039, 1.0642236851973577, 1.1283421258858297, 1.1946592148522128, 1.2631959812511864, 1.3339731595349034, 1.407011200216447, 1.4823302800086415, 1.5599503113873272, 1.6398909516233677, 1.7221716113234105, 1.8068114625156377, 1.8938294463134073, 1.9832442801866852, 2.075074464868551, 2.1693382909216234, 2.2660538449872063, 2.36523901573795, 2.4669114995532007, 2.5710888059345764, 2.6777882626779785, 2.7870270208169257, 2.898822059350997, 3.0131901897720907, 3.1301480604002863, 3.2497121605402226, 3.3718988244681087, 3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158, 4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092, 4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488, 5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294, 5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924, 6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143, 7.323895587840543, 7.5195704746346665, 7.7182615035334345, 7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703, 8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839, 9.644347703669503, 9.873909240696694, 10.106627003236781, 10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364, 11.317986476196008, 11.569896988756009, 11.825048221409341, 12.083451977536606, 12.345119996613247, 12.610063955123938, 12.878295467455942, 13.149826086772048, 13.42466730586372, 13.702830557985108, 13.984327217668513, 14.269168601521828, 14.55736596900856, 14.848930523210871, 15.143873411576273, 15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634, 16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625, 17.95219714852476, 18.281524751807332, 18.614349837764564, 18.95068293910138, 19.290534541298456, 19.633915083172692, 19.98083495742689, 20.331304511189067, 20.685334046541502, 21.042933821039977, 21.404114048223256, 21.76888489811322, 22.137256497705877, 22.50923893145328, 22.884842241736916, 23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083, 24.817520537484558, 25.21505769858089, 25.61628489293138, 26.021211842414342, 26.429848230738664, 26.842203703840827, 27.258287870275353, 27.678110301598522, 28.10168053274597, 28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845, 30.276079891419332, 30.722335150426627, 31.172403958865512, 31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665, 33.4802739966603, 33.953417292456834, 34.430438229418264, 34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349, 36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926, 38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545, 40.98864111053629, 41.520882981230194, 42.05713473317016, 42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697, 44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552, 47.065252796817916, 47.64207110610409, 48.22299226451468, 48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984, 51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392, 53.637271562750364, 54.259673423945976, 54.88626804504493, 55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916, 58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251, 60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159, 63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529, 66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222, 69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104, 71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733, 74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393, 77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869, 81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706, 84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343, 87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655, 90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066, 94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159, 97.78421388448044, 98.6670533535366, 99.55452497210776]);\nexport var ViewingConditions = /*#__PURE__*/function () {\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  function ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {\n    _classCallCheck(this, ViewingConditions);\n    this.n = n;\n    this.aw = aw;\n    this.nbb = nbb;\n    this.ncb = ncb;\n    this.c = c;\n    this.nc = nc;\n    this.rgbD = rgbD;\n    this.fl = fl;\n    this.fLRoot = fLRoot;\n    this.z = z;\n  }\n  return _createClass(ViewingConditions, null, [{\n    key: \"make\",\n    value:\n    /**\n     * Create ViewingConditions from a simple, physically relevant, set of\n     * parameters.\n     *\n     * @param whitePoint White point, measured in the XYZ color space.\n     *     default = D65, or sunny day afternoon\n     * @param adaptingLuminance The luminance of the adapting field. Informally,\n     *     how bright it is in the room where the color is viewed. Can be\n     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n     *     or 200 lux.\n     * @param backgroundLstar The lightness of the area surrounding the color.\n     *     measured by L* in L*a*b*. default = 50.0\n     * @param surround A general description of the lighting surrounding the\n     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n     *     dimly light room, like watching TV at home at night. 2.0 means there\n     *     is no difference between the lighting on the color and around it.\n     *     default = 2.0\n     * @param discountingIlluminant Whether the eye accounts for the tint of the\n     *     ambient lighting, such as knowing an apple is still red in green light.\n     *     default = false, the eye does not perform this process on\n     *       self-luminous objects like displays.\n     */\n    function make() {\n      var whitePoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : utils.whitePointD65();\n      var adaptingLuminance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200.0 / Math.PI * utils.yFromLstar(50.0) / 100.0;\n      var backgroundLstar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50.0;\n      var surround = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2.0;\n      var discountingIlluminant = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var xyz = whitePoint;\n      var rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n      var gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n      var bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n      var f = 0.8 + surround / 10.0;\n      var c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) : math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n      var d = discountingIlluminant ? 1.0 : f * (1.0 - 1.0 / 3.6 * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n      d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n      var nc = f;\n      var rgbD = [d * (100.0 / rW) + 1.0 - d, d * (100.0 / gW) + 1.0 - d, d * (100.0 / bW) + 1.0 - d];\n      var k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n      var k4 = k * k * k * k;\n      var k4F = 1.0 - k4;\n      var fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n      var n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n      var z = 1.48 + Math.sqrt(n);\n      var nbb = 0.725 / Math.pow(n, 0.2);\n      var ncb = nbb;\n      var rgbAFactors = [Math.pow(fl * rgbD[0] * rW / 100.0, 0.42), Math.pow(fl * rgbD[1] * gW / 100.0, 0.42), Math.pow(fl * rgbD[2] * bW / 100.0, 0.42)];\n      var rgbA = [400.0 * rgbAFactors[0] / (rgbAFactors[0] + 27.13), 400.0 * rgbAFactors[1] / (rgbAFactors[1] + 27.13), 400.0 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)];\n      var aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n      return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n    }\n  }]);\n}();\n_ViewingConditions = ViewingConditions;\n/**\n * sRGB-like viewing conditions.\n */\n_defineProperty(ViewingConditions, \"DEFAULT\", _ViewingConditions.make());","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport var Contrast = /*#__PURE__*/function () {\n  function Contrast() {\n    _classCallCheck(this, Contrast);\n  }\n  return _createClass(Contrast, null, [{\n    key: \"ratioOfTones\",\n    value:\n    /**\n     * Returns a contrast ratio, which ranges from 1 to 21.\n     *\n     * @param toneA Tone between 0 and 100. Values outside will be clamped.\n     * @param toneB Tone between 0 and 100. Values outside will be clamped.\n     */\n    function ratioOfTones(toneA, toneB) {\n      toneA = math.clampDouble(0.0, 100.0, toneA);\n      toneB = math.clampDouble(0.0, 100.0, toneB);\n      return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n    }\n  }, {\n    key: \"ratioOfYs\",\n    value: function ratioOfYs(y1, y2) {\n      var lighter = y1 > y2 ? y1 : y2;\n      var darker = lighter === y2 ? y1 : y2;\n      return (lighter + 5.0) / (darker + 5.0);\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighter\",\n    value: function lighter(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var darkY = utils.yFromLstar(tone);\n      var lightY = ratio * (darkY + 5.0) - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(lightY) + 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone <= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darker\",\n    value: function darker(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var lightY = utils.yFromLstar(tone);\n      var darkY = (lightY + 5.0) / ratio - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(darkY) - 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the ratio with tone. For example, there is no color lighter than T100.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 100 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighterUnsafe\",\n    value: function lighterUnsafe(tone, ratio) {\n      var lighterSafe = Contrast.lighter(tone, ratio);\n      return lighterSafe < 0.0 ? 100.0 : lighterSafe;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the [ratio with [tone]. For example, there is no color darker than T0.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 0 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darkerUnsafe\",\n    value: function darkerUnsafe(tone, ratio) {\n      var darkerSafe = Contrast.darker(tone, ratio);\n      return darkerSafe < 0.0 ? 0.0 : darkerSafe;\n    }\n  }]);\n}();","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport rawTokensDark from '../artifacts/atlassian-dark-token-value-for-contrast-check';\nimport { deltaE, getContrastRatio, hexToHSL, hexToRgb, hexToRgbA, HSLToRGB, relativeLuminanceW3C, rgbToHex } from './color-utils';\nimport { additionalContrastChecker } from './custom-theme-token-contrast-check';\nimport { argbFromRgba, Contrast, Hct, rgbaFromArgb } from './hct-color-utils';\nvar lowLuminanceContrastRatios = [1.12, 1.33, 2.03, 2.73, 3.33, 4.27, 5.2, 6.62, 12.46, 14.25];\nvar highLuminanceContrastRatios = [1.08, 1.24, 1.55, 1.99, 2.45, 3.34, 4.64, 6.1, 10.19, 12.6];\nexport var getClosestColorIndex = function getClosestColorIndex(themeRamp, brandColor) {\n  // Iterate over themeRamp and find whichever color is closest to brandColor\n  var closestColorIndex = 0;\n  var closestColorDistance = null;\n  themeRamp.forEach(function (value, index) {\n    var distance = deltaE(hexToRgb(value), hexToRgb(brandColor));\n    if (closestColorDistance === null || distance < closestColorDistance) {\n      closestColorIndex = index;\n      closestColorDistance = distance;\n    }\n  });\n  return closestColorIndex;\n};\nexport var generateColors = function generateColors(brandColor) {\n  // Determine luminance\n  var HSLBrandColorHue = hexToHSL(brandColor)[0];\n  var baseRgb = HSLToRGB(HSLBrandColorHue, 100, 60);\n  var isLowLuminance = relativeLuminanceW3C(baseRgb[0], baseRgb[1], baseRgb[2]) < 0.4;\n  // Choose right palette\n  var themeRatios = isLowLuminance ? lowLuminanceContrastRatios : highLuminanceContrastRatios;\n  var brandRgba = hexToRgbA(brandColor);\n  var hctColor = Hct.fromInt(argbFromRgba({\n    r: brandRgba[0],\n    g: brandRgba[1],\n    b: brandRgba[2],\n    a: brandRgba[3]\n  }));\n  var themeRamp = themeRatios.map(function (contrast) {\n    var rgbaColor = rgbaFromArgb(Hct.from(hctColor.hue, hctColor.chroma, Contrast.darker(100, contrast) + 0.25 // Material's utils provide an offset\n    ).toInt());\n    return rgbToHex(rgbaColor.r, rgbaColor.g, rgbaColor.b);\n  });\n  var closestColorIndex = getClosestColorIndex(themeRamp, brandColor);\n\n  // Replace closet color with brandColor\n  var updatedThemeRamp = _toConsumableArray(themeRamp);\n  updatedThemeRamp[closestColorIndex] = brandColor;\n  return {\n    ramp: updatedThemeRamp,\n    // add the replaced color into the result\n    replacedColor: themeRamp[closestColorIndex]\n  };\n};\n\n/**\n * Return the interaction tokens for a color, given its ramp position and the number of\n * needed interaction states. Use higher-indexed colors (i.e. darker colors) if possible;\n * if there's not enough room to shift up for the required number of interaction tokens,\n * it goes as far as it can, then returns lighter colors lower down the ramp instead.\n *\n * Returns an array of the resulting colors\n */\nfunction getInteractionStates(rampPosition, number, colors) {\n  var result = [];\n  for (var i = 1; i <= number; i++) {\n    if (rampPosition + i < colors.length) {\n      result.push(rampPosition + i);\n    } else {\n      result.push(rampPosition - (i - (colors.length - 1 - rampPosition)));\n    }\n  }\n  return result;\n}\nexport var generateTokenMap = function generateTokenMap(brandColor, mode, themeRamp) {\n  var _generateColors = generateColors(brandColor),\n    ramp = _generateColors.ramp,\n    replacedColor = _generateColors.replacedColor;\n  var colors = themeRamp || ramp;\n  var closestColorIndex = getClosestColorIndex(colors, brandColor);\n  var customThemeTokenMapLight = {};\n  var customThemeTokenMapDark = {};\n  var inputContrast = getContrastRatio(brandColor, '#FFFFFF');\n  // Branch based on brandColor's contrast against white\n  if (inputContrast >= 4.5) {\n    /**\n     * Generate interaction tokens for\n     * - color.background.brand.bold\n     * - color.background.selected.bold\n     */\n    var _getInteractionStates = getInteractionStates(closestColorIndex, 2, colors),\n      _getInteractionStates2 = _slicedToArray(_getInteractionStates, 2),\n      brandBoldSelectedHoveredIndex = _getInteractionStates2[0],\n      brandBoldSelectedPressedIndex = _getInteractionStates2[1];\n    var brandTextIndex = closestColorIndex;\n    if (inputContrast < 5.4 && inputContrast >= 4.8 && closestColorIndex === 6) {\n      // Use the one-level darker closest color (X800) for color.text.brand\n      // and color.link to avoid contrast breaches\n      brandTextIndex = closestColorIndex + 1;\n    }\n\n    /**\n     * Generate interaction token for color.link:\n     * If inputted color replaces X1000\n     * - Pressed = X900\n     *\n     * If inputted color replaces X700-X900\n     * - Shift one 1 step darker\n     */\n    var _getInteractionStates3 = getInteractionStates(brandTextIndex, 1, colors),\n      _getInteractionStates4 = _slicedToArray(_getInteractionStates3, 1),\n      linkPressed = _getInteractionStates4[0];\n    customThemeTokenMapLight = {\n      'color.text.brand': brandTextIndex,\n      'color.icon.brand': closestColorIndex,\n      'color.background.brand.subtlest': 0,\n      'color.background.brand.subtlest.hovered': 1,\n      'color.background.brand.subtlest.pressed': 2,\n      'color.background.brand.bold': closestColorIndex,\n      'color.background.brand.bold.hovered': brandBoldSelectedHoveredIndex,\n      'color.background.brand.bold.pressed': brandBoldSelectedPressedIndex,\n      'color.background.brand.boldest': 9,\n      'color.background.brand.boldest.hovered': 8,\n      'color.background.brand.boldest.pressed': 7,\n      'color.border.brand': closestColorIndex,\n      'color.text.selected': brandTextIndex,\n      'color.icon.selected': closestColorIndex,\n      'color.background.selected.bold': closestColorIndex,\n      'color.background.selected.bold.hovered': brandBoldSelectedHoveredIndex,\n      'color.background.selected.bold.pressed': brandBoldSelectedPressedIndex,\n      'color.border.selected': closestColorIndex,\n      'color.link': brandTextIndex,\n      'color.link.pressed': linkPressed,\n      'color.chart.brand': 5,\n      'color.chart.brand.hovered': 6,\n      'color.background.selected': 0,\n      'color.background.selected.hovered': 1,\n      'color.background.selected.pressed': 2\n    };\n  } else {\n    var brandBackgroundIndex = 6;\n    if (inputContrast < 4.5 && inputContrast >= 4 && closestColorIndex === 6) {\n      // Use the generated closest color instead of the input brand color for\n      // color.background.selected.bold and color.background.brand.bold\n      // to avoid contrast breaches\n      brandBackgroundIndex = replacedColor;\n    }\n    customThemeTokenMapLight = {\n      'color.background.brand.subtlest': 0,\n      'color.background.brand.subtlest.hovered': 1,\n      'color.background.brand.subtlest.pressed': 2,\n      'color.background.brand.bold': brandBackgroundIndex,\n      'color.background.brand.bold.hovered': 7,\n      'color.background.brand.bold.pressed': 8,\n      'color.background.brand.boldest': 9,\n      'color.background.brand.boldest.hovered': 8,\n      'color.background.brand.boldest.pressed': 7,\n      'color.border.brand': 6,\n      'color.background.selected.bold': brandBackgroundIndex,\n      'color.background.selected.bold.hovered': 7,\n      'color.background.selected.bold.pressed': 8,\n      'color.text.brand': 6,\n      'color.icon.brand': 6,\n      'color.chart.brand': 5,\n      'color.chart.brand.hovered': 6,\n      'color.text.selected': 6,\n      'color.icon.selected': 6,\n      'color.border.selected': 6,\n      'color.background.selected': 0,\n      'color.background.selected.hovered': 1,\n      'color.background.selected.pressed': 2,\n      'color.link': 6,\n      'color.link.pressed': 7\n    };\n  }\n  if (mode === 'light') {\n    return {\n      light: customThemeTokenMapLight\n    };\n  }\n\n  /**\n   * Generate dark mode values using rule of symmetry\n   */\n  Object.entries(customThemeTokenMapLight).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    customThemeTokenMapDark[key] = 9 - (typeof value === 'string' ? closestColorIndex : value);\n  });\n\n  /**\n   * If the input brand color < 4.5, and it meets 4.5 contrast again inverse text color\n   * in dark mode, shift color.background.brand.bold to the brand color\n   */\n  if (inputContrast < 4.5) {\n    var inverseTextColor = rawTokensDark['color.text.inverse'];\n    if (getContrastRatio(inverseTextColor, brandColor) >= 4.5 && closestColorIndex >= 2) {\n      customThemeTokenMapDark['color.background.brand.bold'] = closestColorIndex;\n      customThemeTokenMapDark['color.background.brand.bold.hovered'] = closestColorIndex - 1;\n      customThemeTokenMapDark['color.background.brand.bold.pressed'] = closestColorIndex - 2;\n    }\n  }\n  if (mode === 'dark') {\n    return {\n      dark: customThemeTokenMapDark\n    };\n  }\n  return {\n    light: customThemeTokenMapLight,\n    dark: customThemeTokenMapDark\n  };\n};\nexport var generateTokenMapWithContrastCheck = function generateTokenMapWithContrastCheck(brandColor, mode, themeRamp) {\n  var colors = themeRamp || generateColors(brandColor).ramp;\n  var tokenMaps = generateTokenMap(brandColor, mode, colors);\n  var result = {};\n  Object.entries(tokenMaps).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      mode = _ref4[0],\n      map = _ref4[1];\n    if (mode === 'light' || mode === 'dark') {\n      result[mode] = _objectSpread(_objectSpread({}, map), additionalContrastChecker({\n        customThemeTokenMap: map,\n        mode: mode,\n        themeRamp: colors\n      }));\n    }\n  });\n  return result;\n};","import { COLOR_MODE_ATTRIBUTE, CUSTOM_THEME_ATTRIBUTE } from './constants';\nimport { themeStateDefaults } from './theme-config';\nimport { limitSizeOfCustomStyleElements, reduceTokenMap } from './utils/custom-theme-loading-utils';\nimport { generateColors, generateTokenMapWithContrastCheck } from './utils/generate-custom-color-ramp';\nimport { hash } from './utils/hash';\nexport var CUSTOM_STYLE_ELEMENTS_SIZE_THRESHOLD = 10;\n\n/**\n *\n * @param themeSchema The schema of available themes\n * @returns a string with the CSS for the custom theme\n */\n/**\n * Takes a color mode and custom branding options, and returns an array of objects for use in applying custom styles to the document head.\n * Only supplies the color themes necessary for initial render, based on the current themeState. I.e. if in light mode, dark mode themes are not returned.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n *\n * @returns An object array, containing theme IDs, data-attributes to attach to the theme, and the theme CSS.\n * If an error is encountered while loading themes, the themes array will be empty.\n */\nexport function getCustomThemeStyles(themeState) {\n  var _themeState$UNSAFE_th;\n  var brandColor = themeState === null || themeState === void 0 || (_themeState$UNSAFE_th = themeState.UNSAFE_themeOptions) === null || _themeState$UNSAFE_th === void 0 ? void 0 : _themeState$UNSAFE_th.brandColor;\n  var mode = (themeState === null || themeState === void 0 ? void 0 : themeState.colorMode) || themeStateDefaults['colorMode'];\n  var optionString = JSON.stringify(themeState === null || themeState === void 0 ? void 0 : themeState.UNSAFE_themeOptions);\n  var uniqueId = hash(optionString);\n  var themeRamp = generateColors(brandColor).ramp;\n\n  // outputs object to generate to CSS from\n  var themes = [];\n  var tokenMaps = generateTokenMapWithContrastCheck(brandColor, mode, themeRamp);\n  if ((mode === 'light' || mode === 'auto') && tokenMaps.light) {\n    // Light mode theming\n    themes.push({\n      id: 'light',\n      attrs: {\n        'data-theme': 'light',\n        'data-custom-theme': uniqueId\n      },\n      css: \"\\nhtml[\".concat(CUSTOM_THEME_ATTRIBUTE, \"=\\\"\").concat(uniqueId, \"\\\"][\").concat(COLOR_MODE_ATTRIBUTE, \"=\\\"light\\\"][data-theme~=\\\"light:light\\\"] {\\n  /* Branded tokens */\\n    \").concat(reduceTokenMap(tokenMaps.light, themeRamp), \"\\n}\")\n    });\n  }\n  if ((mode === 'dark' || mode === 'auto') && tokenMaps.dark) {\n    // Dark mode theming\n    themes.push({\n      id: 'dark',\n      attrs: {\n        'data-theme': 'dark',\n        'data-custom-theme': uniqueId\n      },\n      css: \"\\nhtml[\".concat(CUSTOM_THEME_ATTRIBUTE, \"=\\\"\").concat(uniqueId, \"\\\"][\").concat(COLOR_MODE_ATTRIBUTE, \"=\\\"dark\\\"][data-theme~=\\\"dark:dark\\\"] {\\n  /* Branded tokens */\\n    \").concat(reduceTokenMap(tokenMaps.dark, themeRamp), \"\\n}\")\n    });\n  }\n  return themes;\n}\nexport function loadAndAppendCustomThemeCss(themeState) {\n  var themes = getCustomThemeStyles(themeState);\n  limitSizeOfCustomStyleElements(CUSTOM_STYLE_ELEMENTS_SIZE_THRESHOLD);\n  themes.map(function (theme) {\n    var styleTag = document.createElement('style');\n    document.head.appendChild(styleTag);\n    styleTag.dataset.theme = theme.attrs['data-theme'];\n    styleTag.dataset.customTheme = theme.attrs['data-custom-theme'];\n    styleTag.textContent = theme.css;\n  });\n}"],"names":["additionalChecks","foreground","backgroundLight","backgroundDark","desiredContrast","updatedTokens","getColorFromTokenRaw","tokenName","mode","tokenValuesLight","tokenValuesDark","signum","num","lerp","start","stop","amount","clampDouble","min","max","input","sanitizeDegreesDouble","degrees","matrixMultiply","row","matrix","_ViewingConditions","SRGB_TO_XYZ","XYZ_TO_SRGB","WHITE_POINT_D65","argbFromRgb","red","green","blue","argbFromLinrgb","linrgb","delinearized","alphaFromArgb","argb","redFromArgb","greenFromArgb","blueFromArgb","lstarFromArgb","y","mathUtils","linearized","xyzFromArgb","labF","yFromLstar","lstar","ft","kappa","ft3","labInvf","lstarFromY","rgbComponent","normalized","Math","pow","round","clampComponent","value","t","Hct","_classCallCheck","this","cam","Cam16","fromInt","internalHue","hue","internalChroma","chroma","internalTone","utils","_createClass","key","get","set","newHue","setInternalState","HctSolver","solveToInt","newChroma","newTone","vc","viewedInVc","toInt","xyzInViewingConditions","recastInVc","fromXyzInViewingConditions","ViewingConditions","make","from","tone","j","q","m","s","jstar","astar","bstar","other","dJ","dA","dB","dEPrime","sqrt","viewed","DEFAULT","viewingConditions","alpha","n","hRad","PI","eHue","cos","ac","aw","c","z","p1","nc","ncb","p2","nbb","hSin","sin","hCos","gamma","a","b","rA","gA","bA","rCBase","abs","rC","math","fl","gCBase","gC","bCBase","bC","rF","rgbD","gF","bF","x","linearR","linearG","linearB","fromIntInViewingConditions","redL","greenL","blueL","rD","gD","bD","rAF","gAF","bAF","u","atanDegrees","atan2","hueRadians","fLRoot","huePrime","mstar","log","h","fromJchInViewingConditions","fromUcsInViewingConditions","exp","J","Q","C","M","angle","component","af","scaledDiscount","SCALED_DISCOUNT_FROM_LINRGB","chromaticAdaptation","sanitizeRadians","source","mid","target","coordinate","axis","intercept","lerpPoint","kR","Y_FROM_LINRGB","kG","kB","coordA","coordB","g","r","isBounded","_b","_r","_g","_r2","_g2","_b2","targetHue","left","right","leftHue","rightHue","initialized","uncut","_n","nthVertex","midHue","hueOf","areInCyclicOrder","floor","ceil","segment","bisectToSegment","lPlane","rPlane","criticalPlaneBelow","trueDelinearized","criticalPlaneAbove","i","mPlane","midPlaneCoordinate","CRITICAL_PLANES","setCoordinate","midpoint","adapted","adaptedAbs","base","tInnerCoeff","iterationRound","jNormalized","inverseChromaticAdaptation","LINRGB_FROM_SCALED_DISCOUNT","fnj","hueDegrees","exactAnswer","findResultByJ","bisectToLimit","_defineProperty","whitePoint","arguments","length","undefined","adaptingLuminance","backgroundLstar","surround","discountingIlluminant","xyz","rW","gW","bW","f","d","k","k4","k4F","cbrt","rgbAFactors","rgbA","Contrast","toneA","toneB","ratioOfYs","y1","y2","lighter","ratio","darkY","lightY","realContrast","delta","returnValue","lighterSafe","darkerSafe","darker","ownKeys","e","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","lowLuminanceContrastRatios","highLuminanceContrastRatios","getClosestColorIndex","themeRamp","brandColor","closestColorIndex","closestColorDistance","index","distance","deltaE","hexToRgb","generateColors","HSLBrandColorHue","hexToHSL","baseRgb","HSLToRGB","themeRatios","relativeLuminanceW3C","brandRgba","hexToRgbA","hctColor","_ref","rValue","gValue","bValue","argbFromRgba","map","contrast","rgbaColor","rgbToHex","updatedThemeRamp","_toConsumableArray","ramp","replacedColor","getInteractionStates","rampPosition","number","colors","result","generateTokenMapWithContrastCheck","tokenMaps","_generateColors","customThemeTokenMapLight","customThemeTokenMapDark","inputContrast","getContrastRatio","_getInteractionStates","_getInteractionStates2","_slicedToArray","brandBoldSelectedHoveredIndex","brandBoldSelectedPressedIndex","brandTextIndex","_getInteractionStates3","linkPressed","brandBackgroundIndex","light","entries","_ref2","inverseTextColor","rawTokensDark","dark","generateTokenMap","_ref3","_ref4","customThemeTokenMap","updatedCustomThemeTokenMap","brandTokens","pairing","background","foregroundTokenValue","backgroundTokenValue","foregroundColor","includes","backgroundColor","token","rampValue","additionalContrastChecker","CUSTOM_STYLE_ELEMENTS_SIZE_THRESHOLD","getCustomThemeStyles","themeState","_themeState$UNSAFE_th","UNSAFE_themeOptions","colorMode","themeStateDefaults","optionString","JSON","stringify","uniqueId","hash","themes","id","attrs","css","concat","CUSTOM_THEME_ATTRIBUTE","COLOR_MODE_ATTRIBUTE","reduceTokenMap","loadAndAppendCustomThemeCss","limitSizeOfCustomStyleElements","theme","styleTag","document","createElement","head","appendChild","dataset","customTheme","textContent"],"sourceRoot":""}